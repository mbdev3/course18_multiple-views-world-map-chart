(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.json(jsonUrl).then(topology => {
        const { countries, land } = topology.objects;
        setData({
          land: topojson.feature(topology, land),
          interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);

    return data;
  };

  const csvUrl =
    'https://gist.githubusercontent.com/curran/a9656d711a8ad31d812b8f9963ac441c/raw/267eac8b97d161c479d950ffad3ddd5ce2d1f370/MissingMigrants-Global-2019-10-08T09-47-14-subset.csv';

  const row = (d) => {
    d.coords = d['Location Coordinates']
      .split(',')
      .map((d) => +d)
      .reverse();
    d['Total Dead and Missing'] = + d['Total Dead and Missing'];
    
        d['Reported Date'] = new Date(d['Reported Date'] );
    return d;
  };

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.csv(csvUrl, row).then(setData);
    }, []);

    return data;
  };

  const projection = d3.geoNaturalEarth1();
  const path = d3.geoPath(projection);
  const graticule = d3.geoGraticule();

  const Marks = ({ worldAtlas: { land, interiors }, data,sizeScale,sizeValue }) => (
    React.createElement( 'g', { className: "marks" },
      React.createElement( 'path', { className: "sphere", d: path({ type: 'Sphere' }) }),
      React.createElement( 'path', { className: "graticules", d: path(graticule()) }),
      land.features.map(feature => (
        React.createElement( 'path', { className: "land", d: path(feature) })
      )),
      React.createElement( 'path', { className: "interiors", d: path(interiors) }),
      data.map(d => {
        const [x, y] = projection(d.coords);
       // console.log(projection(d.coords))
        return React.createElement( 'circle', { cx: x, cy: y, r: sizeScale(sizeValue(d)) },
        
          React.createElement( 'title', null, 'missing migrants : ' + d['Total Dead and Missing'] )
        )
      })
    )
  );

  const BubbleMap = ({data,worldAtlas}) => {
    const sizeValue = (d) =>
      d['Total Dead and Missing'];
    const maxRadius = 15;
    const sizeScale = d3.scaleSqrt()
      .domain([0, d3.max(data, sizeValue)])
      .range([0, maxRadius]);

    return (
      React$1__default.createElement( Marks, {
        worldAtlas: worldAtlas, data: data, sizeScale: sizeScale, sizeValue: sizeValue })
    );
  };

  const Marks$1 = ({
    binnedData,
    yScale,
    xScale,
    xValue,
    yValue,
    innerHeight,
    tooltip,
  }) => (
    React.createElement( 'g', { className: "mark" },
      React.createElement( 'path', {
        fill: "none", stroke: "black", d: d3.line()
          .x((d) => xScale(xValue(d)))
          .y((d) => yScale(yValue(d)))
          .curve(d3.curveNatural)(binnedData) }),
      binnedData.map((d) => (
        React.createElement( 'rect', {
          x: xScale(d.x0), y: yScale(d.y), width: xScale(d.x1) - xScale(d.x0), height: innerHeight - yScale(d.y) },
          React.createElement( 'title', null, tooltip(d.y) )
        )
      ))
    )
  );

  const AxisBottom = ({
    xScale,
    height,
    tickFormat
  }) =>
    xScale.ticks().map((tickValue) => (
      React.createElement( 'g', { className: "tick", key: tickValue, transform: `translate(${xScale(
        tickValue
      )},0)` },
        React.createElement( 'line', { y2: height - 5 }),
        React.createElement( 'text', {
          style: { textAnchor: 'middle' }, y: height -5 },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, width }) =>
    yScale.ticks().map((tickValue) => (
      React.createElement( 'g', {
        className: "tick", transform: `translate(0,${yScale(
        tickValue
      )})` },
        React.createElement( 'line', { x2: width }), " //y1= ", yScale(tickValue), " y2=", yScale(tickValue),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -5, dy: ".32em" },
          tickValue
        )
      )
    ));

  const margin = {
    top: 0,
    bottom: 30,
    right: 0,
    left: 60,
  };

  const DateHistogram = ({ data,height,width }) => {
    const xValue = (d) => d['Reported Date'];

    const yValue = (d) =>
      d['Total Dead and Missing'];
    const yAxisLabel = 'Total Dead and Missing';

    const innerHeight =
      height - margin.top - margin.bottom;
    const innerWidth =
      width - margin.right - margin.left;

    const xScale = d3.scaleTime()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
      .nice();

    const xAxisTickFormat = d3.timeFormat('%m/%d/%Y');
    const [start, stop] = xScale.domain();
    const binnedData = d3.bin()
      .value(xValue)
      .domain(xScale.domain())
      .thresholds(d3.timeMonths(start, stop))(data)
      .map((array) => ({
        y: d3.sum(array, yValue),
        x0: array.x0,
        x1: array.x1,
      }));

    const yScale = d3.scaleLinear()
      .domain([0, d3.max(binnedData, (d) => d.y)])
      .range([innerHeight, 0])
      .nice();

    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'rect', { width: width, height: height, fill: "white" }),
      React$1__default.createElement( 'g', {
        transform: `translate(${margin.left},${margin.top})` },
        React$1__default.createElement( AxisBottom, {
            height: height, xScale: xScale, tickFormat: xAxisTickFormat }),
          React$1__default.createElement( AxisLeft, {
            yScale: yScale, width: width }),
          React$1__default.createElement( 'text', {
            className: "label", textAnchor: "middle", x: innerWidth / 2, y: height - margin.bottom / 2 }
            
          ),
          React$1__default.createElement( 'text', {
            className: "label", textAnchor: "middle", transform: `translate(${
           -40
          },${innerHeight / 2}) rotate(-90)` },
            yAxisLabel
          ),
        React$1__default.createElement( Marks$1, {
          binnedData: binnedData, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, innerHeight: innerHeight, tooltip: (d) => d })
      )
        )
    );
  };

  const width = window.innerWidth;
  const height = window.innerHeight;
  const DateHistogramSize = 0.3;
  const App = () => {
    const worldAtlas = useWorldAtlas();
    const data = useData();

    if (!worldAtlas || !data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( BubbleMap, {
          data: data, worldAtlas: worldAtlas }),
        React$1__default.createElement( 'g', { transform: `translate(0,${height - DateHistogramSize * height})` },
          React$1__default.createElement( DateHistogram, { data: data, height: DateHistogramSize * height, width: width })
        )
      )
    );
  };
  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,